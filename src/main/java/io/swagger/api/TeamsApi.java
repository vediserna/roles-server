/**
 * NOTE: This class is auto generated by the swagger code generator program (2.3.1).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.*;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2018-12-17T23:34:02.537Z")

@Api(value = "teams", description = "the teams API")
public interface TeamsApi {

    @ApiOperation(value = "", nickname = "teamsGet", notes = "", response = Team.class, responseContainer = "List", tags={ "Teams", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "A list of all teams", response = Team.class, responseContainer = "List") })
    @RequestMapping(value = "/teams",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<Team>> teamsGet();

    @ApiOperation(value = "", nickname = "teamsTeamIDGet", notes = "", response = Team.class, tags={ "Teams", })
    @ApiResponses(value = {
            @ApiResponse(code = 200, message = "A specific team", response = Team.class),
            @ApiResponse(code = 404, message = "No team exists with that ID") })
    @RequestMapping(value = "/teams/{teamID}",
            produces = { "application/json" },
            method = RequestMethod.GET)
    ResponseEntity<Team> teamsTeamIDGet(@ApiParam(value = "",required=true) @PathVariable("teamID") Integer teamID);

    @ApiOperation(value = "", nickname = "lookUpMembershipForARole", notes="", response = UserRole.class, responseContainer = "List", tags={ "Teams", })
    @ApiResponses(value = {
            @ApiResponse(code = 200, message = "All users in team that have a given role", response = UserRole.class, responseContainer = "List"),
            @ApiResponse(code = 404, message = "Team not found") })
    @RequestMapping(value = "/teams/{teamID}/membership",
            produces = { "application/json" },
            method = RequestMethod.GET)
    ResponseEntity<List<UserRole>> teamMembersByRole(@ApiParam(value = "", required = true) @PathVariable("teamID") Integer teamID,@NotNull @ApiParam(value = "", required = true) @Valid @RequestParam(value = "role", required = true) String role) ;


    @ApiOperation(value="", nickname = "teamRoles", notes="", response = TeamRolesDTO.class, tags={ "Teams", })
    @ApiResponses(value = {
            @ApiResponse(code = 200, message="All roles for a specific team", response = TeamRolesDTO.class),
            @ApiResponse(code = 404, message="Team not found") })
    @RequestMapping(value = "/teams/{teamID}/roles",
            produces = { "application/json" },
            method = RequestMethod.GET)
    ResponseEntity<TeamRolesDTO> teamRoles(@ApiParam(value = "", required = true) @PathVariable("teamID") Integer teamID);


    @ApiOperation(value = "", nickname = "addNewRoleToTeam", notes="", response = TeamRolesDTO.class, tags={ "Teams", })
    @ApiResponses(value = {
            @ApiResponse(code = 201, message = "New Role created"),
            @ApiResponse(code = 409, message = "This role already exists for this team"),
            @ApiResponse(code = 404, message = "Team not found") })
    @RequestMapping(value = "/teams/{teamID}/roles",
            produces = { "application/json" },
            method = RequestMethod.POST)
    ResponseEntity<TeamRolesDTO> addNewRoleToTeam(@ApiParam(value = "", required = true) @PathVariable("teamID") Integer teamID,@NotNull @ApiParam(value = "", required = true) @Valid @RequestParam(value = "role", required = true) String role) ;

    @ApiOperation(value = "", nickname = "getUserRoleInTeam", notes="", response = UserRole.class, tags={ "Teams", })
    @ApiResponses(value= {
            @ApiResponse(code = 200, message = "User role in this team", response = UserRole.class),
            @ApiResponse(code = 404, message = "User/Team not found or this user not in this team") })
    @RequestMapping(value = "/teams/{teamID}/membership/{userID}",
            produces = { "application/json" },
            method = RequestMethod.GET)
    ResponseEntity<UserRole> getUserRoleInTeam(@ApiParam(value="", required = true) @PathVariable("teamID") Integer teamID, @ApiParam(value="", required = true) @PathVariable("userID") Integer userID);

    @ApiOperation(value = "", nickname = "assignUserRoleInTeam", notes="", response = UserRole.class, tags={ "Teams", })
    @ApiResponses(value= {
            @ApiResponse(code = 201, message = "User role in this team", response = UserRole.class),
            @ApiResponse(code = 404, message = "User/Team not found or this user not in this team") })
    @RequestMapping(value = "/teams/{teamID}/membership/{userID}",
            produces = { "application/json" },
            method = RequestMethod.POST)
    ResponseEntity assignUserRoleInTeam(@ApiParam(value="", required = true) @PathVariable("teamID") Integer teamID, @ApiParam(value="", required = true) @PathVariable("userID") Integer userID, @NotNull @ApiParam(value = "", required = true) @Valid @RequestParam(value = "role", required = true) String role);
}
