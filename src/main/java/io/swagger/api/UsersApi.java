/**
 * NOTE: This class is auto generated by the swagger code generator program (2.3.1).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.Membership;
import io.swagger.model.User;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;

import java.util.List;
@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2018-12-17T23:34:02.537Z")

@Api(value = "users", description = "the users API")
public interface UsersApi {

    @ApiOperation(value = "", nickname = "usersGet", notes = "", response = User.class, responseContainer = "List", tags={ "Users", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "A list of all users", response = User.class, responseContainer = "List") })
    @RequestMapping(value = "/users",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<User>> usersGet();


    @ApiOperation(value = "", nickname = "usersUserIDGet", notes = "", response = User.class, tags={ "Users", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "A specific user", response = User.class),
        @ApiResponse(code = 404, message = "No user exists with that ID") })
    @RequestMapping(value = "/users/{userID}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<User> usersUserIDGet(@ApiParam(value = "",required=true) @PathVariable("userID") Integer userID);


    @ApiOperation(value="", nickname = "getUserRoleInTeam", notes="", response = Membership.class, tags={ "Users", })
    @ApiResponses(value = {
            @ApiResponse(code = 200, message = "User role in team", response = Membership.class),
            @ApiResponse(code = 404, message = "User/Team not found or user is not in team.") })
    @RequestMapping(value = "/users/{userID}/membership/{teamID}",
        produces = { "application/json" },
        method = RequestMethod.GET)
    ResponseEntity<Membership> getUserRoleInTeam(@ApiParam(value = "",required=true) @PathVariable("userID") Integer userID,@ApiParam(value = "",required=true) @PathVariable("teamID") Integer teamID);
}
